<!DOCTYPE html>
<html lang="en">

<head>
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <!-- site metas -->
    <title>sbs</title>
    <meta name="keywords" content="">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">    
    <!-- bootstrap css -->
    <link rel="stylesheet" href="/public/css/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" href="/public/css/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/public/css/responsive.css">
    <!-- fevicon -->
    <link rel="icon" href="/public/images/fevicon.png" type="image/gif" />
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css">
    <!-- Custom Styles -->
    <link rel="stylesheet" href="/public/css/style1.css">
    <link rel="stylesheet" href="/public/css/styles.css">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

    <!-- Fonts & Icons -->
    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">

    <!-- jQuery, Popper.js, and Bootstrap JavaScript -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <style>
        .navbar {

            flex-direction: row;
            align-items: center;
            padding: 2rem;
            justify-content: left;
        }

        .nav-item {
            width: 100%;
            margin-bottom: 0.5rem;
            padding-left: 1rem;
        }

        .nav-link {
            display: flex;
            align-items: center;
            justify-content: left;
            padding: 0.5rem 2rem;
            width: 100%;
        }

        .active-nav-item .nav-link {
            background-color: black;
            color: white;
            padding: 10px;
        }

        header {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background-color: #fcfcfc;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem 2rem; /* Adjust padding as needed */
        }

        /* Add styles for the main content area */
        .content {
            margin-top: 80px; /* Adjust margin to make content start below the header */
        }

        /* Adjust table styles to take full remaining width */
        table {
            width: 100%;
        }  
        
        body {
            padding-top: 56px;
        }

        .category-table th, .category-table td {
            text-align: center;
        }

        .edit-modal {
            margin-top: 50px;
        }     
        .product-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
        }

        .product-card {
            border: 1px solid #ddd;
            padding: 15px;
            text-align: center;
        }    
        #shadowNav {
            z-index: 2;
            background-color: #fcfcfc;
            height: 5rem;
            display: grid;
            grid-template-columns: 60% 1fr;
            align-items: center;
            flex-direction: row;
            position: fixed;
            width: 100%;
            justify-content: left;
            border: 1px solid 1px solid rgb(230 230 230);
        } 
        
        .graph-container {
        border-radius: 15px;
        background-color: white;
        padding: 1rem; 
        margin-bottom: 20px; 
    }


    .graph-canvas {
        border-radius: 15px;
        border: 1px solid #ddd; 
    }        
    </style>
</head>

<body class="main-layout">
    <!-- Add your body content here -->
    <!-- loader -->
    <div class="navbar theme-orange shadowNav " style="border: 1px solid 1px solid rgb(230 230 230);">
        <div>
            <div style="padding-left: 1rem;height: 13rem">
                <img src="/public/images/1.png" alt="" class="avatar">
                <h2 style="font-size: 0.8rem;color: #2d2d2d;font-weight: bold;width: 100%;padding-top: 3rem;">
                    Welcome back
                </h2>
            </div>
            <ul class="navbar-nav" style="display: flex; flex-direction: column; justify-content: center; align-items: center;">
                <li class="nav-item">
                    <a class="nav-link" href="/createmenu">Create Menu<i class="fas fa-shopping-cart"></i></a>
                </li>
                <li class="nav-item" style="width: 100%; border-top-left-radius: 6px; border-bottom-left-radius: 6px;">
                    <a class="nav-link" href="/customerordermanagement">Customer Orders<i class="fas fa-shopping-basket"></i></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/purchaseorder">Supplier Order<i class="fas fa-truck"></i></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/viewupdatecategories">Manage Categories<i class="fas fa-list-alt"></i></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/productsmanagement">Manage Products<i class="fas fa-cubes"></i></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/report">Reports<i class="fas fa-chart-bar"></i></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/logout">Logout<i class="fas fa-sign-out-alt"></i></a>
                </li>
            </ul> 
        </div>

    </div>        
    
    <div class="main-content" style="margin:0rem;">

        <div class="shadowNav" style="    
        z-index: 2;
        background-color: #fcfcfc;
        display: grid;
        height: 11vh;
        grid-template-columns: 60% 40%;
  align-items: center;
        flex-direction: row;
        position: fixed;
        width: 100%;
        justify-content: left;
  border: 1px solid 1px solid rgb(230 230 230);
  
  ">
              <div style="display: flex;width: 100%;justify-content: center;">
                    <h6 style="   font-weight: 800;
                    font-size: 1.5em;
                    padding-left: 15rem;">View Reports
                    </h6>
              </div>
    </div>

    <!-- top -->
    <div class="contact" style="width: 100%; overflow-y:scroll; max-height: 120vh;">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <!-- Display total profit as a decimal -->
                    <div style="display: flex;gap: 1rem;">
                        <div style="width: 49%;">
                          <div style="background-color: white; border-radius: 15px; ">
                            <div style="padding: 3rem 2rem; background-color: #FC5130; border-radius: 15px;">
                              <h3 style="font-weight: bold; font-size: 1.5rem; color: #F7F4F3;"><span id="totalProfit"
                                  class="material-symbols-outlined">
                                </span></h3>        
                            </div>
                
                          </div>
                        </div>
                    </div>               
                </div>
            </div>
        </div>
    
    
    
        <div class="container graph-container">
            <div class="row">
                <div class="col-md-12" style="justify-content: center;">
                    <h3>Category-wise Profit</h3>
                    <div class="graph-canvas" id="categoryGraphContainer"></div>
                </div>
            </div>
        </div>
        <div class="container graph-container">
            <div class="row">
                <div class="col-md-12" style="justify-content: center;">
                    <h3>Product-wise Inventory</h3>
                    <div class="graph-canvas" id="quantityProductGraphContainer"></div>
                </div>
            </div>
        </div>
        <div class="container graph-container">
        <h1>Items Running Low on Stock</h1>
        <table style="border: 1;">
            <thead>
                <tr>
                    <th>Supplier Item Name</th>
                    <th>Minimum Quantity</th>
                    <th>Total Supplies</th>
                    <th>Total Required Quantity</th>
                </tr>
            </thead>
            <tbody id="lowStockItems">
                
            </tbody>
        </table>    
        </div>
    </div>
        
</div>    


 <!-- JavaScript files-->
 <script src="/public/js/jquery.min.js"></script>
 <script src="/public/js/bootstrap.bundle.min.js"></script>
 <script src="/public/js/jquery-3.0.0.min.js"></script>
 <!-- sidebar -->
 <script src="/public/js/custom.js"></script>
 <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
 <script>
   document.addEventListener("DOMContentLoaded", function () {
       // Fetch total profit
       fetch("http://localhost:5358/api/customerproductorders/sum")
           .then(response => {
               if (!response.ok) {
                   throw new Error(`HTTP error! Status: ${response.status}`);
               }
               return response.json();
           })
           .then(totalProfit => {
               const totalProfitElement = document.getElementById("totalProfit");
               totalProfitElement.innerHTML = `Profit: R${totalProfit.toFixed(2)}`;
           })
           .catch(error => {
               console.error('Fetch total profit error:', error);
           });

       // Fetch category-wise profit
       fetch("http://localhost:5358/api/products/GetProductsProfit")
           .then(response => {
               if (!response.ok) {
                   throw new Error(`HTTP error! Status: ${response.status}`);
               }
               return response.json();
           })
           .then(categoryData => {
               // Display category-wise profit using Chart.js
               const categoryGraphContainer = document.getElementById("categoryGraphContainer");
               //const inventoryGraphContainer = document.getElementById("quantityGraphContainer");
               
               categoryData.forEach(category => {
                   // Create a canvas for each category
                   const canvas = document.createElement("canvas");
                   canvas.width = 400;
                   canvas.height = 200;

                   // Set an ID for each canvas based on the category name
                   canvas.id = category.categoryName.replace(/\s/g, '');

                   // Append canvas to the container
                   categoryGraphContainer.appendChild(canvas);

                   const categoryGraph = canvas.getContext("2d");
                   
                   const datasets = {
                       labels: category.products.map(product => product.productName),
                       datasets: [{
                           label: category.categoryName,
                           backgroundColor: getRandomColor(),
                           data: category.products.map(product => product.productProfit.toFixed(2)),
                       }]
                   };

                   new Chart(categoryGraph, {
                       type: 'bar',
                       data: datasets,
                       options: {
                        aspectRatio: 1.5,
                           scales: {
                               x: {
                                   stacked: false,
                               },
                               y: {
                                   stacked: true,
                               }
                           },
                           plugins: {
                               legend: {
                                   display: true,
                                   position: 'top',
                               }
                           }
                       }
                   });


                  //  new Chart(inventoryGraph, {
                  //      type: 'bar',
                  //      data: datasets2,
                  //      options: {
                  //          scales: {
                  //              x: {
                  //                  stacked: false,
                  //              },
                  //              y: {
                  //                  stacked: true,
                  //              }
                  //          },
                  //          plugins: {
                  //              legend: {
                  //                  display: true,
                  //                  position: 'top',
                  //              }
                  //          }
                  //      }
                  //  });

               });
           })
           .catch(error => {
               console.error('Fetch category-wise profit error:', error);
           });
   });

   // Function to generate random colors for bar graphs
   function getRandomColor() {
       const letters = '0123456789ABCDEF';
       let color = '#';
       for (let i = 0; i < 6; i++) {
           color += letters[Math.floor(Math.random() * 16)];
       }
       return color;
   }
</script>
<script>
    function isLowStock(supplierItem) {
        return supplierItem.totalSupplies < supplierItem.totalRequiredQuantity;
    }
   document.addEventListener("DOMContentLoaded", function () {
       fetch("http://localhost:5358/api/products/GetProductsQuantities")
           .then(response => {
               if (!response.ok) {
                   throw new Error(`HTTP error! Status: ${response.status}`);
               }
               return response.json();
           })
           .then(productData => {
               const quantityGraphContainer = document.getElementById("quantityProductGraphContainer");


        // Get the table body element
        const lowStockTable = document.getElementById('lowStockItems');

        const lowStockMap = new Map();

        productData.forEach(product => {
            product.supplierItems.forEach(supplierItem => {
                if (isLowStock(supplierItem)) {
                    const itemKey = `${supplierItem.supplierItemId}-${supplierItem.supplierItemName}`;
                    if (lowStockMap.has(itemKey)) {
                        const existingItem = lowStockMap.get(itemKey);
                        existingItem.minimumQuantity += supplierItem.minimumQuantity;
                        existingItem.totalSupplies += supplierItem.totalSupplies;
                        existingItem.totalRequiredQuantity += supplierItem.totalRequiredQuantity;
                    } else {
                        lowStockMap.set(itemKey, {
                            supplierItemName: supplierItem.supplierItemName,
                            minimumQuantity: supplierItem.minimumQuantity,
                            totalSupplies: supplierItem.totalSupplies,
                            totalRequiredQuantity: supplierItem.totalRequiredQuantity
                        });
                    }
                }
            });
        });

        lowStockMap.forEach(item => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${item.supplierItemName}</td>
                <td>${item.minimumQuantity}</td>
                <td>${item.totalSupplies}</td>
                <td>${item.totalRequiredQuantity}</td>
            `;
            lowStockTable.appendChild(row);
        });


        //_________________________************************______________________

               productData.forEach(product => {
                   // Create a canvas for each product
                   const canvas = document.createElement("canvas");
                   canvas.width = 400;
                   canvas.height = 200;
                   canvas.style.margin = "10px"; // Add margin between graphs

                   canvas.id = product.productName.replace(/\s/g, '');
                   quantityGraphContainer.appendChild(canvas);

                   const quantityGraph = canvas.getContext("2d");

                   const labels = product.supplierItems.map(supplierItem => supplierItem.supplierItemName);

                   const minimumQuantityData = product.supplierItems.map(supplierItem => supplierItem.minimumQuantity);
                   const totalSuppliesData = product.supplierItems.map(supplierItem => supplierItem.totalSupplies);
                   const totalQuantityOfSupplierItemAllProductsData = product.supplierItems.map(supplierItem => supplierItem.totalRequiredQuantity);

                   new Chart(quantityGraph, {
                       type: 'bar',
                       data: {
                           labels: labels,
                           datasets: [
                               {
                                   label: 'Minimum Supplies',
                                   data: minimumQuantityData,
                                   borderColor: 'red',
                                   backgroundColor: 'rgba(255, 0, 0, 0.5)',
                               },
                               {
                                   label: 'Total Required Supplies',
                                   data: totalQuantityOfSupplierItemAllProductsData,
                                   borderColor: 'green',
                                   backgroundColor: 'rgba(0, 255, 0, 0.5)',
                               },
                               {
                                   label: 'Total Supplies Stock',
                                   data: totalSuppliesData,
                                   borderColor: 'blue',
                                   backgroundColor: 'rgba(0, 0, 255, 0.5)',
                               }                           
                           ],
                       },
                       options: {
                        aspectRatio: 1.5,
                           responsive: true,
                           plugins: {
                               legend: {
                                   position: 'top',
                               },
                               title: {
                                   display: true,
                                   text: 'Supplier Item Quantities for ' + product.productName
                               }
                           }
                       }
                   });
               });
           })
           .catch(error => {
               console.error('Fetch quantity graph data error:', error);
           });
   });
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Get all nav items
        const navItems = document.querySelectorAll('.nav-item');
        const navLinks = document.querySelectorAll('.nav-link');

        // Function to remove active class from all items
        function removeActiveClass() {
            navItems.forEach((innerItem) => innerItem.classList.remove('active-nav-item'));
        }

        // Add click event listener to each nav item
        navItems.forEach((item, index) => {
            item.addEventListener('click', function () {
                removeActiveClass();
                // Add active class to clicked item
                this.classList.add('active-nav-item');
            });
        });

        // Check current URL and set active class
        const currentURL = window.location.pathname;
        navLinks.forEach((link, index) => {
            if (link.getAttribute('href') === currentURL) {
                removeActiveClass();
                navItems[index].classList.add('active-nav-item');
            }
        });
    });

</script>
</body>

</html>